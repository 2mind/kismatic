---
  # setup NGINX and download all required binaries
  - name: create an nginx directory
    file:
      path: "{{ repository_dir }}"
      state: directory

  # download etcd binaries TODO how to use group_vars
  - name: download etcd for k8s
    get_url:
      url: "https://github.com/coreos/etcd/releases/download/v{{ etcd_k8s_version }}/etcd-v{{ etcd_k8s_version }}-linux-amd64.tar.gz"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download etcd for networking
    get_url:
      url: "https://github.com/coreos/etcd/releases/download/v{{ etcd_networking_version }}/etcd-v{{ etcd_networking_version }}-linux-amd64.tar.gz"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"

  # download kubernetes binaries
  - name: download kube-apiserver - v{{ kubernetes_version }}
    get_url:
      url: "{{ kubernetes_binary_path }}/kube-apiserver"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download kube-controller-manager - v{{ kubernetes_version }}
    get_url:
      url: "{{ kubernetes_binary_path }}/kube-controller-manager"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download kubectl - v{{ kubernetes_version }}
    get_url:
      url: "{{ kubernetes_binary_path }}/kubectl"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download kubelet - v{{ kubernetes_version }}
    get_url:
      url: "{{ kubernetes_binary_path }}/kubelet"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download kube-proxy - v{{ kubernetes_version }}
    get_url:
      url: "{{ kubernetes_binary_path }}/kube-proxy"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download kube-scheduler - v{{ kubernetes_version }}
    get_url:
      url: "{{ kubernetes_binary_path }}/kube-scheduler"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"

  # download calico binaries
  - name: download calicoctl - v{{ calico_ctl_version }}
    get_url:
      url: "{{ calicoctl_binary_path }}/calicoctl"
      dest: "{{ repository_dir }}"
      mode: "{{ repository_mode }}"
  - name: download calico - v{{ calico_version }}
    get_url:
      url: "{{ calico_cni_path }}/calico"
      dest: "{{ repository_dir }}/calico"
      mode: "{{ repository_mode }}"
  - name: download calico-ipam - v{{ calico_version }}
    get_url:
      url: "{{ calico_cni_path }}/calico-ipam"
      dest: "{{ repository_dir }}/calico-ipam"
      mode: "{{ repository_mode }}"

  # start NGINX docker container
  - name: check if nginx docker container is running
    shell: docker ps | grep nginx
    register: docker_ps_nginx
    ignore_errors: yes # dont fail, next task will start it if not running
    changed_when: false

  - name: start nginx docker container
    command: docker run --name nginx -p {{ repository_port }}:80 -v {{ repository_dir }}:/usr/share/nginx/html:ro -d nginx
    when: docker_ps_nginx|failed
