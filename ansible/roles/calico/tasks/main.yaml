---
  # install Calico network plugin
  # setup directories
  - name: create {{ network_plugin_dir }} directory
    file:
      path: "{{ network_plugin_dir }}"
      state: directory
  - name: create {{ network_plugin_bin_dir }} directory
    file:
      path: "{{ network_plugin_bin_dir }}"
      state: directory

  # install calicoctl
  # pre-download Docker image
  - name: download {{ calico_node_img }}
    command: docker pull {{ calico_node_img }}
  # start calico-node service
  - name: copy calico-node.service to remote
    template:
      src: calico-node.service.j2
      dest: "{{ kubernetes_service_dir }}/calico-node.service"
      owner: "{{ kubernetes_owner }}"
      group: "{{ kubernetes_group }}"
      mode: "{{ kubernetes_service_mode }}"
    notify:
      - reload services
      - enable calico-node
      - restart calico-node service
      - verify calico-node is running

  # force_calico_node_restart=true to force restart
  - name: force restart calico-node
    command: /bin/true
    notify:
      - enable calico-node
      - restart calico-node service
      - verify calico-node is running
    when: force_calico_node_restart is defined and force_calico_node_restart|bool == true

  - meta: flush_handlers  #Run handlers

  # configure calcico
  - name: copy 10-calico.conf to remote
    template:
      src: 10-calico.conf.j2
      dest: "{{ network_plugin_dir }}/10-calico.conf"
  # Check if default pool exists
  - name: check if default pool ({{default_cidr}})  exists
    command: calicoctl pool show --ipv4
    register: calico_default_pool_check
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    when: "'master' in group_names"
  - name: remove default CIDR - {{ default_cidr }}
    command: calicoctl pool remove {{ default_cidr }}
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    ignore_errors: yes # TODO better way to handle when this is run more than once
    # Only run on Master nodes if the default pool exists
    when: "'master' in group_names and '{{ default_cidr }}' in calico_default_pool_check.stdout"
    run_once: true
  # Two networking modes are supported: 'routed' and 'overlay'. Depending on the mode
  # the pool flags change. Mainly, --ipip is added when 'overlay' is specified.
  - name: add pods CIDR (Routed mode) - {{ kubernetes_pods_cidr }}
    command: calicoctl pool add {{ kubernetes_pods_cidr }} --nat-outgoing
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    when: "'master' in group_names and calico_network_type == 'routed'"
    run_once: true
  - name: add pods CIDR (Overlay mode) - {{ kubernetes_pods_cidr }}
    command: calicoctl pool add {{ kubernetes_pods_cidr }} --nat-outgoing --ipip
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    when: "'master' in group_names and calico_network_type == 'overlay'"
    run_once: true
