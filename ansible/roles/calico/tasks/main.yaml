---
  # install Calico network plugin
  # setup directories
  - name: create {{ network_plugin_dir }} directory
    file:
      path: "{{ network_plugin_dir }}"
      state: directory
  - name: create {{ network_plugin_bin_dir }} directory
    file:
      path: "{{ network_plugin_bin_dir }}"
      state: directory
  # install calicoctl
  - name: download calicoctl - {{ calico_ctl_version }}
    get_url:
      url: "{{ local_repository_path|default(calicoctl_binary_path) }}/calicoctl"
      dest: "{{ bin_dir }}"
      mode: "{{ calico_executable_mode }}"
  # pre-download Docker image
  - name: download calico/node:{{ calico_docker_version }} docker image
    command: docker pull calico/node:{{ calico_docker_version }}
  # start calico-node service
  - name: copy calico-node.service to remote
    template:
      src: calico-node.service.j2
      dest: "{{ kubernetes_service_dir }}/calico-node.service"
      owner: "{{ kubernetes_owner }}"
      group: "{{ kubernetes_group }}"
      mode: "{{ kuberntes_service_mode }}"
    notify:
      - reload services
      - enable calico-node
      - restart calico-node service
  # force_calico_node_restart=true to force restart
  - name: force restart calico-node
    command: /bin/true
    notify:
      - enable calico-node
      - restart calico-node service
    when: force_calico_node_restart is defined and force_calico_node_restart == "true"
  - meta: flush_handlers  #Run handlers

  # install cni binaries, TODO track with https://github.com/projectcalico/calico-containers/issues/1115
  - name: download cni - {{ cni_version }}
    unarchive:
      src: "{{ cni_path }}"
      dest: "{{ network_plugin_bin_dir }}"
      remote_src: yes
      copy: no
  # install calico binaries
  - name: download calico - {{ calico_version }}
    get_url:
      url: "{{ local_repository_path|default(calico_cni_path) }}/calico"
      dest: "{{ network_plugin_bin_dir }}/calico"
      mode: "{{ calico_executable_mode }}"
  - name: download calico-ipam - {{ calico_version }}
    get_url:
      url: "{{ local_repository_path|default(calico_cni_path) }}/calico-ipam"
      dest: "{{ network_plugin_bin_dir }}/calico-ipam"
      mode: "{{ calico_executable_mode }}"
  # configure calcico
  - name: copy 10-calico.conf to remote
    template:
      src: 10-calico.conf.j2
      dest: "{{ network_plugin_dir }}/10-calico.conf"
  - name: remove default CIDR - {{ dafault_cidr }}
    command: calicoctl pool remove {{ dafault_cidr }}
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    ignore_errors: yes # TODO better way to handle when this is run more than once
    when: "'master' in group_names" # only run on masters
    run_once: true
  # Two networking modes are supported: 'routed' and 'overlay'. Depending on the mode
  # the pool flags change. Mainly, --ipip is added when 'overlay' is specified.
  - name: add pods CIDR (Routed mode) - {{ kubernetes_pods_cidr }}
    command: calicoctl pool add {{ kubernetes_pods_cidr }} --nat-outgoing
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    when: "'master' in group_names and calico_network_type == 'routed'"
    run_once: true
  - name: add pods CIDR (Overlay mode) - {{ kubernetes_pods_cidr }}
    command: calicoctl pool add {{ kubernetes_pods_cidr }} --nat-outgoing --ipip
    environment:
      DEFAULT_IPV4: "{{ internal_ipv4 }}"
      ETCD_ENDPOINTS: "{{ etcd_networking_cluster_ip_list }}"
      ETCD_CA_CERT_FILE: "{{ kubernetes_certificates_ca_path }}"
      ETCD_CERT_FILE: "{{ kubernetes_certificates_cert_path }}"
      ETCD_KEY_FILE: "{{ kubernetes_certificates_key_path }}"
    when: "'master' in group_names and calico_network_type == 'overlay'"
    run_once: true
