---
  # install kubernetes master components
  # setup directories
  - name: create {{ kubernetes_install_dir }} directory
    file: path={{ kubernetes_install_dir }} state=directory
  - name: create {{ kubernetes_lib_dir }} directory
    file: path={{ kubernetes_lib_dir }} state=directory

  # download kubernetes binaries
  - name: download kube-apiserver - v{{ kubernetes_version }}
    get_url: url={{ kubernetes_binary_path }}/kube-apiserver dest={{ bin_dir }} mode={{ kubernetes_executable_mode }}
  - name: download kube-controller-manager - v{{ kubernetes_version }}
    get_url: url={{ kubernetes_binary_path }}/kube-controller-manager dest={{ bin_dir }} mode={{ kubernetes_executable_mode }}
  - name: download kube-scheduler - v{{ kubernetes_version }}
    get_url: url={{ kubernetes_binary_path }}/kube-scheduler dest={{ bin_dir }} mode={{ kubernetes_executable_mode }}
  - name: download kubectl - v{{ kubernetes_version }}
    get_url: url={{ kubernetes_binary_path }}/kubectl dest={{ bin_dir }} mode={{ kubernetes_executable_mode }}
  - name: copy tokens.csv to remote
    copy: src=tokens.csv dest={{ kubernetes_lib_dir }}/tokens.csv
  - name: copy authorization-policy.json to remote
    copy: src=authorization-policy.json dest={{ kubernetes_lib_dir }}/authorization-policy.json

  # start kubernetes services
  # kube-apiserver
  - name: copy kube-apiserver.service to remote
    template: src=kube-apiserver.service.j2 dest={{ kubernetes_service_dir }}/kube-apiserver.service owner={{ kuberntes_owner }} group={{ kubernetes_group }} mode={{ kuberntes_service_mode }}
  - name: reload services
    command: systemctl daemon-reload
  - name: enable kube-apiserver
    command: systemctl enable kube-apiserver.service
  - name: start kube-apiserver service
    service: name=kube-apiserver.service state=started enabled=yes
  # kube-scheduler
  - name: copy kube-scheduler.service to remote
    template: src=kube-scheduler.service.j2 dest={{ kubernetes_service_dir }}/kube-scheduler.service owner={{ kuberntes_owner }} group={{ kubernetes_group }} mode={{ kuberntes_service_mode }}
  - name: reload services
    command: systemctl daemon-reload
  - name: enable kube-scheduler
    command: systemctl enable kube-scheduler.service
  - name: start kube-scheduler service
    service: name=kube-scheduler.service state=started enabled=yes
  # kube-controller-manager
  - name: copy kube-controller-manager.service to remote
    template: src=kube-controller-manager.service.j2 dest={{ kubernetes_service_dir }}/kube-controller-manager.service owner={{ kuberntes_owner }} group={{ kubernetes_group }} mode={{ kuberntes_service_mode }}
  - name: reload services
    command: systemctl daemon-reload
  - name: enable kube-controller-manager
    command: systemctl enable kube-controller-manager.service
  - name: start kube-controller-manager service
    service: name=kube-controller-manager.service state=started enabled=yes
